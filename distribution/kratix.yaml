apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: kratix-platform-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: bucketstatestores.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    kind: BucketStateStore
    listKind: BucketStateStoreList
    plural: bucketstatestores
    singular: bucketstatestore
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: BucketStateStore is the Schema for the bucketstatestores API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: BucketStateStoreSpec defines the desired state of BucketStateStore
            properties:
              bucketName:
                type: string
              endpoint:
                type: string
              insecure:
                type: boolean
              path:
                description: 'Path within the StateStore to write documents. This
                  path should be allocated to Kratix as it will create, update, and
                  delete files within this path. Path structure begins with provided
                  path and ends with namespaced cluster name: <StateStore.Spec.Path>/<Cluster.Spec.Path>/<Cluster.Metadata.Namespace>/<Cluster.Metadata.Name>/'
                type: string
              secretRef:
                description: SecretRef specifies the Secret containing authentication
                  credentials
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
            required:
            - bucketName
            - endpoint
            type: object
          status:
            description: BucketStateStoreStatus defines the observed state of BucketStateStore
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: clusters.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    kind: Cluster
    listKind: ClusterList
    plural: clusters
    singular: cluster
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Cluster is the Schema for the clusters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterSpec defines the desired state of Cluster
            properties:
              path:
                description: 'Path within the StateStore to write documents. This
                  path should be allocated to Kratix as it will create, update, and
                  delete files within this path. Path structure begins with provided
                  path and ends with namespaced cluster name: <StateStore.Spec.Path>/<Cluster.Spec.Path>/<Cluster.Metadata.Namespace>/<Cluster.Metadata.Name>/'
                type: string
              secretRef:
                description: SecretRef specifies the Secret containing authentication
                  credentials
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              stateStoreRef:
                description: StateStoreReference is a reference to a StateStore
                properties:
                  kind:
                    enum:
                    - BucketStateStore
                    - GitStateStore
                    type: string
                  name:
                    type: string
                required:
                - kind
                - name
                type: object
            type: object
          status:
            description: ClusterStatus defines the observed state of Cluster
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: gitstatestores.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    kind: GitStateStore
    listKind: GitStateStoreList
    plural: gitstatestores
    singular: gitstatestore
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: GitStateStore is the Schema for the gitstatestores API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: GitStateStoreSpec defines the desired state of GitStateStore
            properties:
              branch:
                default: main
                type: string
              path:
                description: 'Path within the StateStore to write documents. This
                  path should be allocated to Kratix as it will create, update, and
                  delete files within this path. Path structure begins with provided
                  path and ends with namespaced cluster name: <StateStore.Spec.Path>/<Cluster.Spec.Path>/<Cluster.Metadata.Namespace>/<Cluster.Metadata.Name>/'
                type: string
              secretRef:
                description: SecretRef specifies the Secret containing authentication
                  credentials
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              url:
                type: string
            type: object
          status:
            description: GitStateStoreStatus defines the observed state of GitStateStore
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: promises.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    kind: Promise
    listKind: PromiseList
    plural: promises
    singular: promise
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Promise is the Schema for the promises API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PromiseSpec defines the desired state of Promise
            properties:
              clusterSelector:
                additionalProperties:
                  type: string
                type: object
              workerClusterResources:
                items:
                  description: Resources represents the manifest workload to be deployed
                    on worker cluster
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                type: array
              xaasCrd:
                description: X's CustomResourceDefinition to create the X-aaS offering
                type: object
                x-kubernetes-embedded-resource: true
                x-kubernetes-preserve-unknown-fields: true
              xaasRequestPipeline:
                description: Array of Image tags to transform from input request custom
                  resource to output resource(s)
                items:
                  type: string
                type: array
            type: object
          status:
            description: PromiseStatus defines the observed state of Promise
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: workplacements.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    kind: WorkPlacement
    listKind: WorkPlacementList
    plural: workplacements
    singular: workplacement
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: WorkPlacement is the Schema for the workplacements API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: WorkPlacementSpec defines the desired state of WorkPlacement
            properties:
              targetClusterName:
                type: string
              workName:
                description: The unique identifier of the Work parent
                type: string
            type: object
          status:
            description: WorkPlacementStatus defines the observed state of WorkPlacement
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: works.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    kind: Work
    listKind: WorkList
    plural: works
    singular: work
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Work is the Schema for the works API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: WorkSpec defines the desired state of Work
            properties:
              clusterSelector:
                additionalProperties:
                  type: string
                description: ClusterSelector is the selector to use for selecting
                  the worker cluster
                type: object
              replicas:
                description: -1 denotes Cluster Worker Resources, 1 denotes Resource
                  Request
                type: integer
              workload:
                description: Workload represents the manifest workload to be deployed
                  on worker cluster
                properties:
                  manifests:
                    description: Manifests represents a list of kuberenetes resources
                      to be deployed on the worker cluster.
                    items:
                      description: Manifest represents a resource to be deployed on
                        worker cluster
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    type: array
                type: object
            type: object
          status:
            description: WorkStatus defines the observed state of Work
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kratix-platform-controller-manager
  namespace: kratix-platform-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kratix-platform-leader-election-role
  namespace: kratix-platform-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kratix-platform-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - create
  - delete
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - platform.kratix.io
  resources:
  - bucketstatestores
  - gitstatestores
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - platform.kratix.io
  resources:
  - clusters
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - platform.kratix.io
  resources:
  - clusters/finalizers
  verbs:
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - clusters/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - promises
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - platform.kratix.io
  resources:
  - promises/finalizers
  verbs:
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - promises/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - workplacements
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - platform.kratix.io
  resources:
  - workplacements/finalizers
  verbs:
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - workplacements/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - works
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - platform.kratix.io
  resources:
  - works/finalizers
  verbs:
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - works/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings
  verbs:
  - create
  - delete
  - get
  - list
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterroles
  verbs:
  - bind
  - create
  - delete
  - escalate
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kratix-platform-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kratix-platform-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kratix-platform-leader-election-rolebinding
  namespace: kratix-platform-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kratix-platform-leader-election-role
subjects:
- kind: ServiceAccount
  name: kratix-platform-controller-manager
  namespace: kratix-platform-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kratix-platform-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kratix-platform-manager-role
subjects:
- kind: ServiceAccount
  name: kratix-platform-controller-manager
  namespace: kratix-platform-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kratix-platform-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kratix-platform-proxy-role
subjects:
- kind: ServiceAccount
  name: kratix-platform-controller-manager
  namespace: kratix-platform-system
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: 2743c979.kratix.io
kind: ConfigMap
metadata:
  name: kratix-platform-manager-config
  namespace: kratix-platform-system
---
apiVersion: v1
data:
  WC_IMG: syntasso/kratix-platform-pipeline-adapter:dev
kind: ConfigMap
metadata:
  name: kratix-platform-wc-img-config
  namespace: kratix-platform-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: kratix-platform-controller-manager-metrics-service
  namespace: kratix-platform-system
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: kratix-platform-controller-manager
  namespace: kratix-platform-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        env:
        - name: WC_IMG
          valueFrom:
            configMapKeyRef:
              key: WC_IMG
              name: kratix-platform-wc-img-config
        image: syntasso/kratix-platform:dev
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
      securityContext:
        runAsNonRoot: true
      serviceAccountName: kratix-platform-controller-manager
      terminationGracePeriodSeconds: 10
