apiVersion: platform.kratix.io/v1alpha1
kind: Promise
metadata:
  creationTimestamp: null
  name: redis
  namespace: default
  labels:
    kratix.io/promise-version: v0.1.0
spec:
  api:
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: redis.marketplace.kratix.io
    spec:
      group: marketplace.kratix.io
      names:
        kind: redis
        plural: redis
        singular: redis
      scope: Namespaced
      versions:
        - name: v1alpha1
          schema:
            openAPIV3Schema:
              properties:
                spec:
                  properties:
                    size:
                      default: small
                      description: |
                        Size of this Redis deployment. If small, it deploy redis with a single replica; if large, deploy redis with 3 replicas.
                      pattern: ^(small|large)$
                      type: string
                  type: object
              type: object
          served: true
          storage: true
  workflows:
    resource:
      configure:
        - apiVersion: platform.kratix.io/v1alpha1
          kind: Pipeline
          metadata:
            name: instance-configure
            namespace: default
          spec:
            rbac:
            - apiGroups:
                - ""
              resources:
                - secrets
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - ""
              resources:
                - secrets
              resourceNames:
                - foo
              resourceNamespace: kratix-platform-system
              verbs:
                - get
                - list
                - watch
            containers:
              - image: ghcr.io/syntasso/kratix-pipeline-utility:v0.0.1
                name: rbac-test
                command: [ "sh" ]
                args:
                  - -c
                  - |
                    set -euo pipefail
                    set +x
                    kubectl get secrets -n default
                    kubectl get secret foo -n kratix-platform-system
                    kubectl get secrets -n gitea || true
                    kubectl get configmaps || true
